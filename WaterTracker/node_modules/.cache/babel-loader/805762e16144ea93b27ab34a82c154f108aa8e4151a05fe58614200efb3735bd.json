{"ast":null,"code":"import _classCallCheck from \"C:/Users/Rahma.Salah/Desktop/React Task/ReactTask/WaterTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Rahma.Salah/Desktop/React Task/ReactTask/WaterTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Rahma.Salah/Desktop/React Task/ReactTask/WaterTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Rahma.Salah/Desktop/React Task/ReactTask/WaterTracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nif (!window['Smart']) {\n  window['Smart'] = {\n    RenderMode: 'manual'\n  };\n} else {\n  window['Smart'].RenderMode = 'manual';\n}\nimport '../source/modules/smart.tank';\nimport React from 'react';\nvar Smart = window.Smart;\n/**\r\n Tank is a UI Component used in Engineering and Scientific applications. It is broadly used to display the fluid levels.\r\n*/\nvar Tank = /*#__PURE__*/function (_React$Component) {\n  _inherits(Tank, _React$Component);\n  var _super = _createSuper(Tank);\n  function Tank(props) {\n    var _this;\n    _classCallCheck(this, Tank);\n    _this = _super.call(this, props);\n    _this.componentRef = React.createRef();\n    return _this;\n  }\n  // Gets the id of the React component.\n  _createClass(Tank, [{\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'Tank' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** If is set to true all values coerce to the interval, set in the interval property.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"coerce\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.coerce : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.coerce = value;\n      }\n    }\n    /** Sets or gets whether custom ticks at (possibly) uneven interval will be plotted. The ticks to be plotted are defined with the property customTicks.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"customInterval\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.customInterval : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.customInterval = value;\n      }\n    }\n    /** If customInterval is enabled, sets a list of ticks to be plotted. If coerce is set to true, the value will snap to these ticks.\r\n    *\tProperty type: number[]\r\n    */\n  }, {\n    key: \"customTicks\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.customTicks : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.customTicks = value;\n      }\n    }\n    /** Sets or gets the pattern which labels are displayed in when mode is 'date'.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"dateLabelFormatString\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dateLabelFormatString : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dateLabelFormatString = value;\n      }\n    }\n    /** Sets or gets the char to use as the decimal separator in numeric values.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"decimalSeparator\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.decimalSeparator : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.decimalSeparator = value;\n      }\n    }\n    /** Enables or disables the widget.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** When cooerce property is true, all values coerce to the interval's value.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"interval\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.interval : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.interval = value;\n      }\n    }\n    /** Sets the direction of the tank. If is true - positions of the tank's begin and end are changed.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"inverted\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.inverted : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.inverted = value;\n      }\n    }\n    /** A callback function that can be used to format the values displayed on the tank labels.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"labelFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.labelFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.labelFormatFunction = value;\n      }\n    }\n    /** Sets or gets the widget's label visibility\r\n    *\tProperty type: LabelsVisibility | string\r\n    */\n  }, {\n    key: \"labelsVisibility\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.labelsVisibility : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.labelsVisibility = value;\n      }\n    }\n    /** Sets or gets the locale. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Enables or disables the usage of logarithmic scale in the widget.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"logarithmicScale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.logarithmicScale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.logarithmicScale = value;\n      }\n    }\n    /** Sets or gets the maximum value of the widget.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.max : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.max = value;\n      }\n    }\n    /** Sets or gets the type of used mechanical action.\r\n    *\tProperty type: DragMechanicalAction | string\r\n    */\n  }, {\n    key: \"mechanicalAction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.mechanicalAction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.mechanicalAction = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Sets or gets the minimum value of the widget.\r\n    *\tProperty type: string | number\r\n    */\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.min : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.min = value;\n      }\n    }\n    /** Sets or gets whether the widget works with numbers or dates.\r\n    *\tProperty type: ScaleMode | string\r\n    */\n  }, {\n    key: \"mode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.mode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.mode = value;\n      }\n    }\n    /** Sets or gets the element's name, which is used as a reference when the data is submitted.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.name : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.name = value;\n      }\n    }\n    /** Sets the orientation of the widget\r\n    *\tProperty type: Orientation | string\r\n    */\n  }, {\n    key: \"orientation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.orientation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.orientation = value;\n      }\n    }\n    /** Determines the number of digits after the decimal point. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"precisionDigits\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.precisionDigits : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.precisionDigits = value;\n      }\n    }\n    /** If the widgets is readonly, the users cannot iteract with the element.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.rightToLeft = value;\n      }\n    }\n    /** Sets the position of the widget's scales.\r\n    *\tProperty type: ScalePosition | string\r\n    */\n  }, {\n    key: \"scalePosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.scalePosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.scalePosition = value;\n      }\n    }\n    /** Sets the type of the tank's scale.\r\n    *\tProperty type: ScaleType | string\r\n    */\n  }, {\n    key: \"scaleType\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.scaleType : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.scaleType = value;\n      }\n    }\n    /** Enables or disables scientific notation.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"scientificNotation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.scientificNotation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.scientificNotation = value;\n      }\n    }\n    /** Enables or disables displaying of the thumb label.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"showThumbLabel\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.showThumbLabel : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.showThumbLabel = value;\n      }\n    }\n    /** Enables or disables displaying of the tooltip.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"showTooltip\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.showTooltip : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.showTooltip = value;\n      }\n    }\n    /** Enables or disables displaying of the units.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"showUnit\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.showUnit : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.showUnit = value;\n      }\n    }\n    /** Determining how many significant digits are in a number. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: number\r\n    */\n  }, {\n    key: \"significantDigits\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.significantDigits : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.significantDigits = value;\n      }\n    }\n    /** Sets or gets the element's visual theme.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** Sets or gets the position of the thumb label.\r\n    *\tProperty type: Position | string\r\n    */\n  }, {\n    key: \"thumbLabelPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.thumbLabelPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.thumbLabelPosition = value;\n      }\n    }\n    /** Sets or gets the position of the ticks in jqxTank widget.\r\n    *\tProperty type: TicksPosition | string\r\n    */\n  }, {\n    key: \"ticksPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.ticksPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.ticksPosition = value;\n      }\n    }\n    /** Sets or gets the visibility of the ticks.\r\n    *\tProperty type: TicksVisibility | string\r\n    */\n  }, {\n    key: \"ticksVisibility\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.ticksVisibility : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.ticksVisibility = value;\n      }\n    }\n    /** Sets or gets the position of the tooltip in jqxTank widget.\r\n    *\tProperty type: Position | string\r\n    */\n  }, {\n    key: \"tooltipPosition\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.tooltipPosition : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.tooltipPosition = value;\n      }\n    }\n    /** Sets or gets if the element can be focused.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    }\n    /** Sets or gets the name of unit used in jqxTank widget.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"unit\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unit : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unit = value;\n      }\n    }\n    /** Sets the value's validation by min/max. If 'strict' is applied, the value is always validated by min and max. If 'interaction' is applied, programmatic value changes are not coerced to min/max and if min/max are changed, resulting in the current value being out of range, the value is not coerced, and no change event is fired.\r\n    *\tProperty type: Validation | string\r\n    */\n  }, {\n    key: \"validation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.validation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.validation = value;\n      }\n    }\n    /** Sets or gets the value of the jqxTank widget.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.value : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.value = value;\n      }\n    }\n    /** Sets or gets the word length. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: WordLength | string\r\n    */\n  }, {\n    key: \"wordLength\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.wordLength : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.wordLength = value;\n      }\n    }\n    // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"animation\", \"coerce\", \"customInterval\", \"customTicks\", \"dateLabelFormatString\", \"decimalSeparator\", \"disabled\", \"interval\", \"inverted\", \"labelFormatFunction\", \"labelsVisibility\", \"locale\", \"localizeFormatFunction\", \"logarithmicScale\", \"max\", \"mechanicalAction\", \"messages\", \"min\", \"mode\", \"name\", \"orientation\", \"precisionDigits\", \"readonly\", \"rightToLeft\", \"scalePosition\", \"scaleType\", \"scientificNotation\", \"showThumbLabel\", \"showTooltip\", \"showUnit\", \"significantDigits\", \"theme\", \"thumbLabelPosition\", \"ticksPosition\", \"ticksVisibility\", \"tooltipPosition\", \"unfocusable\", \"unit\", \"validation\", \"value\", \"wordLength\"];\n    }\n    // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onChange\", \"onCreate\", \"onReady\"];\n    }\n    /** Focuses the tank.\r\n    */\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var _this2 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.focus();\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this2.nativeElement.focus();\n        });\n      }\n    }\n    /** Gets the optimal size of the widget.\r\n    * @returns {any}\r\n    */\n  }, {\n    key: \"getOptimalSize\",\n    value: function getOptimalSize() {\n      var result = this.nativeElement.getOptimalSize();\n      return result;\n    }\n    /** Get/set the value of the tank.\r\n    * @param {string | number} value?. The value to be set. If no parameter is passed, returns the displayed value of the tank.\r\n    * @returns {string}\r\n    */\n  }, {\n    key: \"val\",\n    value: function val(value) {\n      var result = this.nativeElement.val(value);\n      return result;\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop in props) {\n        if (_prop === 'class' || _prop === 'className') {\n          var classNames = props[_prop].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop] !== that.nativeElement[_prop]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop === 'hover' || _prop === 'active' || _prop === 'focus' || _prop === 'selected') {\n            that.nativeElement.setAttribute(_prop, '');\n          }\n          var normalizedProp = normalizeProp(_prop);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop, props[_prop]);\n          }\n          if (props[_prop] !== undefined) {\n            if (typeof props[_prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-tank\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }]);\n  return Tank;\n}(React.Component);\nexport default Tank;\nexport { Smart, Tank };","map":{"version":3,"names":["window","RenderMode","React","Smart","Tank","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","componentRef","createRef","_createClass","key","get","_id","Math","floor","random","toString","substring","nativeElement","animation","undefined","set","value","coerce","customInterval","customTicks","dateLabelFormatString","decimalSeparator","disabled","interval","inverted","labelFormatFunction","labelsVisibility","locale","localizeFormatFunction","logarithmicScale","max","mechanicalAction","messages","min","mode","name","orientation","precisionDigits","readonly","rightToLeft","scalePosition","scaleType","scientificNotation","showThumbLabel","showTooltip","showUnit","significantDigits","theme","thumbLabelPosition","ticksPosition","ticksVisibility","tooltipPosition","unfocusable","unit","validation","wordLength","focus","_this2","isRendered","whenRendered","getOptimalSize","result","val","componentDidRender","initialize","that","events","styles","stringifyCircularJSON","obj","seen","WeakSet","JSON","stringify","k","v","has","add","prop","startsWith","properties","indexOf","current","isCompleted","reactStateProps","parse","classNames","trim","split","className","classList","contains","normalizeProp","str","replace","g","toUpperCase","setAttribute","normalizedProp","eventName","toLowerCase","Render","onCreate","onReady","styleName","style","componentDidMount","componentDidUpdate","componentWillUnmount","whenRenderedCallbacks","i","eventListeners","length","removeEventListener","render","createElement","ref","children","Component"],"sources":["C:/Users/Rahma.Salah/Desktop/React Task/ReactTask/WaterTracker/node_modules/smart-webcomponents-react/tank/tank.esm.js"],"sourcesContent":["\nif (!window['Smart']) {\n\twindow['Smart'] = { RenderMode: 'manual' };\n}\nelse {\n\twindow['Smart'].RenderMode = 'manual';\n}\t\nimport '../source/modules/smart.tank';\n\nimport React from 'react';\n\nconst Smart = window.Smart;\r\n/**\r\n Tank is a UI Component used in Engineering and Scientific applications. It is broadly used to display the fluid levels.\r\n*/\r\nclass Tank extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.componentRef = React.createRef();\r\n    }\r\n    // Gets the id of the React component.\r\n    get id() {\r\n        if (!this._id) {\r\n            this._id = 'Tank' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        }\r\n        return this._id;\r\n    }\r\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\r\n    get animation() {\r\n        return this.nativeElement ? this.nativeElement.animation : undefined;\r\n    }\r\n    set animation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.animation = value;\r\n        }\r\n    }\r\n    /** If is set to true all values coerce to the interval, set in the interval property.\r\n    *\tProperty type: boolean\r\n    */\r\n    get coerce() {\r\n        return this.nativeElement ? this.nativeElement.coerce : undefined;\r\n    }\r\n    set coerce(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.coerce = value;\r\n        }\r\n    }\r\n    /** Sets or gets whether custom ticks at (possibly) uneven interval will be plotted. The ticks to be plotted are defined with the property customTicks.\r\n    *\tProperty type: boolean\r\n    */\r\n    get customInterval() {\r\n        return this.nativeElement ? this.nativeElement.customInterval : undefined;\r\n    }\r\n    set customInterval(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.customInterval = value;\r\n        }\r\n    }\r\n    /** If customInterval is enabled, sets a list of ticks to be plotted. If coerce is set to true, the value will snap to these ticks.\r\n    *\tProperty type: number[]\r\n    */\r\n    get customTicks() {\r\n        return this.nativeElement ? this.nativeElement.customTicks : undefined;\r\n    }\r\n    set customTicks(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.customTicks = value;\r\n        }\r\n    }\r\n    /** Sets or gets the pattern which labels are displayed in when mode is 'date'.\r\n    *\tProperty type: string\r\n    */\r\n    get dateLabelFormatString() {\r\n        return this.nativeElement ? this.nativeElement.dateLabelFormatString : undefined;\r\n    }\r\n    set dateLabelFormatString(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.dateLabelFormatString = value;\r\n        }\r\n    }\r\n    /** Sets or gets the char to use as the decimal separator in numeric values.\r\n    *\tProperty type: string\r\n    */\r\n    get decimalSeparator() {\r\n        return this.nativeElement ? this.nativeElement.decimalSeparator : undefined;\r\n    }\r\n    set decimalSeparator(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.decimalSeparator = value;\r\n        }\r\n    }\r\n    /** Enables or disables the widget.\r\n    *\tProperty type: boolean\r\n    */\r\n    get disabled() {\r\n        return this.nativeElement ? this.nativeElement.disabled : undefined;\r\n    }\r\n    set disabled(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.disabled = value;\r\n        }\r\n    }\r\n    /** When cooerce property is true, all values coerce to the interval's value.\r\n    *\tProperty type: string | number\r\n    */\r\n    get interval() {\r\n        return this.nativeElement ? this.nativeElement.interval : undefined;\r\n    }\r\n    set interval(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.interval = value;\r\n        }\r\n    }\r\n    /** Sets the direction of the tank. If is true - positions of the tank's begin and end are changed.\r\n    *\tProperty type: boolean\r\n    */\r\n    get inverted() {\r\n        return this.nativeElement ? this.nativeElement.inverted : undefined;\r\n    }\r\n    set inverted(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.inverted = value;\r\n        }\r\n    }\r\n    /** A callback function that can be used to format the values displayed on the tank labels.\r\n    *\tProperty type: any\r\n    */\r\n    get labelFormatFunction() {\r\n        return this.nativeElement ? this.nativeElement.labelFormatFunction : undefined;\r\n    }\r\n    set labelFormatFunction(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.labelFormatFunction = value;\r\n        }\r\n    }\r\n    /** Sets or gets the widget's label visibility\r\n    *\tProperty type: LabelsVisibility | string\r\n    */\r\n    get labelsVisibility() {\r\n        return this.nativeElement ? this.nativeElement.labelsVisibility : undefined;\r\n    }\r\n    set labelsVisibility(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.labelsVisibility = value;\r\n        }\r\n    }\r\n    /** Sets or gets the locale. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\r\n    get locale() {\r\n        return this.nativeElement ? this.nativeElement.locale : undefined;\r\n    }\r\n    set locale(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.locale = value;\r\n        }\r\n    }\r\n    /** Callback, related to localization module.\r\n    *\tProperty type: any\r\n    */\r\n    get localizeFormatFunction() {\r\n        return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\r\n    }\r\n    set localizeFormatFunction(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.localizeFormatFunction = value;\r\n        }\r\n    }\r\n    /** Enables or disables the usage of logarithmic scale in the widget.\r\n    *\tProperty type: boolean\r\n    */\r\n    get logarithmicScale() {\r\n        return this.nativeElement ? this.nativeElement.logarithmicScale : undefined;\r\n    }\r\n    set logarithmicScale(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.logarithmicScale = value;\r\n        }\r\n    }\r\n    /** Sets or gets the maximum value of the widget.\r\n    *\tProperty type: string | number\r\n    */\r\n    get max() {\r\n        return this.nativeElement ? this.nativeElement.max : undefined;\r\n    }\r\n    set max(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.max = value;\r\n        }\r\n    }\r\n    /** Sets or gets the type of used mechanical action.\r\n    *\tProperty type: DragMechanicalAction | string\r\n    */\r\n    get mechanicalAction() {\r\n        return this.nativeElement ? this.nativeElement.mechanicalAction : undefined;\r\n    }\r\n    set mechanicalAction(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.mechanicalAction = value;\r\n        }\r\n    }\r\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\r\n    get messages() {\r\n        return this.nativeElement ? this.nativeElement.messages : undefined;\r\n    }\r\n    set messages(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.messages = value;\r\n        }\r\n    }\r\n    /** Sets or gets the minimum value of the widget.\r\n    *\tProperty type: string | number\r\n    */\r\n    get min() {\r\n        return this.nativeElement ? this.nativeElement.min : undefined;\r\n    }\r\n    set min(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.min = value;\r\n        }\r\n    }\r\n    /** Sets or gets whether the widget works with numbers or dates.\r\n    *\tProperty type: ScaleMode | string\r\n    */\r\n    get mode() {\r\n        return this.nativeElement ? this.nativeElement.mode : undefined;\r\n    }\r\n    set mode(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.mode = value;\r\n        }\r\n    }\r\n    /** Sets or gets the element's name, which is used as a reference when the data is submitted.\r\n    *\tProperty type: string\r\n    */\r\n    get name() {\r\n        return this.nativeElement ? this.nativeElement.name : undefined;\r\n    }\r\n    set name(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.name = value;\r\n        }\r\n    }\r\n    /** Sets the orientation of the widget\r\n    *\tProperty type: Orientation | string\r\n    */\r\n    get orientation() {\r\n        return this.nativeElement ? this.nativeElement.orientation : undefined;\r\n    }\r\n    set orientation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.orientation = value;\r\n        }\r\n    }\r\n    /** Determines the number of digits after the decimal point. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: number\r\n    */\r\n    get precisionDigits() {\r\n        return this.nativeElement ? this.nativeElement.precisionDigits : undefined;\r\n    }\r\n    set precisionDigits(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.precisionDigits = value;\r\n        }\r\n    }\r\n    /** If the widgets is readonly, the users cannot iteract with the element.\r\n    *\tProperty type: boolean\r\n    */\r\n    get readonly() {\r\n        return this.nativeElement ? this.nativeElement.readonly : undefined;\r\n    }\r\n    set readonly(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.readonly = value;\r\n        }\r\n    }\r\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: boolean\r\n    */\r\n    get rightToLeft() {\r\n        return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\r\n    }\r\n    set rightToLeft(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.rightToLeft = value;\r\n        }\r\n    }\r\n    /** Sets the position of the widget's scales.\r\n    *\tProperty type: ScalePosition | string\r\n    */\r\n    get scalePosition() {\r\n        return this.nativeElement ? this.nativeElement.scalePosition : undefined;\r\n    }\r\n    set scalePosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.scalePosition = value;\r\n        }\r\n    }\r\n    /** Sets the type of the tank's scale.\r\n    *\tProperty type: ScaleType | string\r\n    */\r\n    get scaleType() {\r\n        return this.nativeElement ? this.nativeElement.scaleType : undefined;\r\n    }\r\n    set scaleType(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.scaleType = value;\r\n        }\r\n    }\r\n    /** Enables or disables scientific notation.\r\n    *\tProperty type: boolean\r\n    */\r\n    get scientificNotation() {\r\n        return this.nativeElement ? this.nativeElement.scientificNotation : undefined;\r\n    }\r\n    set scientificNotation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.scientificNotation = value;\r\n        }\r\n    }\r\n    /** Enables or disables displaying of the thumb label.\r\n    *\tProperty type: boolean\r\n    */\r\n    get showThumbLabel() {\r\n        return this.nativeElement ? this.nativeElement.showThumbLabel : undefined;\r\n    }\r\n    set showThumbLabel(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.showThumbLabel = value;\r\n        }\r\n    }\r\n    /** Enables or disables displaying of the tooltip.\r\n    *\tProperty type: boolean\r\n    */\r\n    get showTooltip() {\r\n        return this.nativeElement ? this.nativeElement.showTooltip : undefined;\r\n    }\r\n    set showTooltip(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.showTooltip = value;\r\n        }\r\n    }\r\n    /** Enables or disables displaying of the units.\r\n    *\tProperty type: boolean\r\n    */\r\n    get showUnit() {\r\n        return this.nativeElement ? this.nativeElement.showUnit : undefined;\r\n    }\r\n    set showUnit(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.showUnit = value;\r\n        }\r\n    }\r\n    /** Determining how many significant digits are in a number. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: number\r\n    */\r\n    get significantDigits() {\r\n        return this.nativeElement ? this.nativeElement.significantDigits : undefined;\r\n    }\r\n    set significantDigits(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.significantDigits = value;\r\n        }\r\n    }\r\n    /** Sets or gets the element's visual theme.\r\n    *\tProperty type: string\r\n    */\r\n    get theme() {\r\n        return this.nativeElement ? this.nativeElement.theme : undefined;\r\n    }\r\n    set theme(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.theme = value;\r\n        }\r\n    }\r\n    /** Sets or gets the position of the thumb label.\r\n    *\tProperty type: Position | string\r\n    */\r\n    get thumbLabelPosition() {\r\n        return this.nativeElement ? this.nativeElement.thumbLabelPosition : undefined;\r\n    }\r\n    set thumbLabelPosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.thumbLabelPosition = value;\r\n        }\r\n    }\r\n    /** Sets or gets the position of the ticks in jqxTank widget.\r\n    *\tProperty type: TicksPosition | string\r\n    */\r\n    get ticksPosition() {\r\n        return this.nativeElement ? this.nativeElement.ticksPosition : undefined;\r\n    }\r\n    set ticksPosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.ticksPosition = value;\r\n        }\r\n    }\r\n    /** Sets or gets the visibility of the ticks.\r\n    *\tProperty type: TicksVisibility | string\r\n    */\r\n    get ticksVisibility() {\r\n        return this.nativeElement ? this.nativeElement.ticksVisibility : undefined;\r\n    }\r\n    set ticksVisibility(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.ticksVisibility = value;\r\n        }\r\n    }\r\n    /** Sets or gets the position of the tooltip in jqxTank widget.\r\n    *\tProperty type: Position | string\r\n    */\r\n    get tooltipPosition() {\r\n        return this.nativeElement ? this.nativeElement.tooltipPosition : undefined;\r\n    }\r\n    set tooltipPosition(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.tooltipPosition = value;\r\n        }\r\n    }\r\n    /** Sets or gets if the element can be focused.\r\n    *\tProperty type: boolean\r\n    */\r\n    get unfocusable() {\r\n        return this.nativeElement ? this.nativeElement.unfocusable : undefined;\r\n    }\r\n    set unfocusable(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.unfocusable = value;\r\n        }\r\n    }\r\n    /** Sets or gets the name of unit used in jqxTank widget.\r\n    *\tProperty type: string\r\n    */\r\n    get unit() {\r\n        return this.nativeElement ? this.nativeElement.unit : undefined;\r\n    }\r\n    set unit(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.unit = value;\r\n        }\r\n    }\r\n    /** Sets the value's validation by min/max. If 'strict' is applied, the value is always validated by min and max. If 'interaction' is applied, programmatic value changes are not coerced to min/max and if min/max are changed, resulting in the current value being out of range, the value is not coerced, and no change event is fired.\r\n    *\tProperty type: Validation | string\r\n    */\r\n    get validation() {\r\n        return this.nativeElement ? this.nativeElement.validation : undefined;\r\n    }\r\n    set validation(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.validation = value;\r\n        }\r\n    }\r\n    /** Sets or gets the value of the jqxTank widget.\r\n    *\tProperty type: any\r\n    */\r\n    get value() {\r\n        return this.nativeElement ? this.nativeElement.value : undefined;\r\n    }\r\n    set value(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.value = value;\r\n        }\r\n    }\r\n    /** Sets or gets the word length. Applicable only when scaleType is 'integer'.\r\n    *\tProperty type: WordLength | string\r\n    */\r\n    get wordLength() {\r\n        return this.nativeElement ? this.nativeElement.wordLength : undefined;\r\n    }\r\n    set wordLength(value) {\r\n        if (this.nativeElement) {\r\n            this.nativeElement.wordLength = value;\r\n        }\r\n    }\r\n    // Gets the properties of the React component.\r\n    get properties() {\r\n        return [\"animation\", \"coerce\", \"customInterval\", \"customTicks\", \"dateLabelFormatString\", \"decimalSeparator\", \"disabled\", \"interval\", \"inverted\", \"labelFormatFunction\", \"labelsVisibility\", \"locale\", \"localizeFormatFunction\", \"logarithmicScale\", \"max\", \"mechanicalAction\", \"messages\", \"min\", \"mode\", \"name\", \"orientation\", \"precisionDigits\", \"readonly\", \"rightToLeft\", \"scalePosition\", \"scaleType\", \"scientificNotation\", \"showThumbLabel\", \"showTooltip\", \"showUnit\", \"significantDigits\", \"theme\", \"thumbLabelPosition\", \"ticksPosition\", \"ticksVisibility\", \"tooltipPosition\", \"unfocusable\", \"unit\", \"validation\", \"value\", \"wordLength\"];\r\n    }\r\n    // Gets the events of the React component.\r\n    get eventListeners() {\r\n        return [\"onChange\", \"onCreate\", \"onReady\"];\r\n    }\r\n    /** Focuses the tank.\r\n    */\r\n    focus() {\r\n        if (this.nativeElement.isRendered) {\r\n            this.nativeElement.focus();\r\n        }\r\n        else {\r\n            this.nativeElement.whenRendered(() => {\r\n                this.nativeElement.focus();\r\n            });\r\n        }\r\n    }\r\n    /** Gets the optimal size of the widget.\r\n    * @returns {any}\r\n  */\r\n    getOptimalSize() {\r\n        const result = this.nativeElement.getOptimalSize();\r\n        return result;\r\n    }\r\n    /** Get/set the value of the tank.\r\n    * @param {string | number} value?. The value to be set. If no parameter is passed, returns the displayed value of the tank.\r\n    * @returns {string}\r\n  */\r\n    val(value) {\r\n        const result = this.nativeElement.val(value);\r\n        return result;\r\n    }\r\n    componentDidRender(initialize) {\r\n        const that = this;\r\n        const props = {};\r\n        const events = {};\r\n        let styles = null;\r\n        const stringifyCircularJSON = (obj) => {\r\n            const seen = new WeakSet();\r\n            return JSON.stringify(obj, (k, v) => {\r\n                if (v !== null && typeof v === 'object') {\r\n                    if (seen.has(v))\r\n                        return;\r\n                    seen.add(v);\r\n                }\r\n                if (k === 'Smart') {\r\n                    return v;\r\n                }\r\n                return v;\r\n            });\r\n        };\r\n        for (let prop in that.props) {\r\n            if (prop === 'children') {\r\n                continue;\r\n            }\r\n            if (prop === 'style') {\r\n                styles = that.props[prop];\r\n                continue;\r\n            }\r\n            if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\r\n                events[prop] = that.props[prop];\r\n                continue;\r\n            }\r\n            props[prop] = that.props[prop];\r\n        }\r\n        if (initialize) {\r\n            that.nativeElement = this.componentRef.current;\r\n            if (that.nativeElement && !that.nativeElement.isCompleted) {\r\n                that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\r\n            }\r\n        }\r\n        if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\r\n            //\treturn;\r\n        }\r\n        for (let prop in props) {\r\n            if (prop === 'class' || prop === 'className') {\r\n                const classNames = props[prop].trim().split(' ');\r\n                for (let className in classNames) {\r\n                    if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\r\n                        that.nativeElement.classList.add(classNames[className]);\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            if (props[prop] !== that.nativeElement[prop]) {\r\n                const normalizeProp = (str) => {\r\n                    return str.replace(/-([a-z])/g, function (g) {\r\n                        return g[1].toUpperCase();\r\n                    });\r\n                };\r\n                if (prop === 'hover' || prop === 'active' || prop === 'focus' || prop === 'selected') {\r\n                    that.nativeElement.setAttribute(prop, '');\r\n                }\r\n                const normalizedProp = normalizeProp(prop);\r\n                if (that.nativeElement[normalizedProp] === undefined) {\r\n                    that.nativeElement.setAttribute(prop, props[prop]);\r\n                }\r\n                if (props[prop] !== undefined) {\r\n                    if (typeof props[prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\r\n                        if (stringifyCircularJSON(props[prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    that.nativeElement[normalizedProp] = props[prop];\r\n                }\r\n            }\r\n        }\r\n        for (let eventName in events) {\r\n            that[eventName] = events[eventName];\r\n            that.nativeElement[eventName.toLowerCase()] = events[eventName];\r\n        }\r\n        if (initialize) {\r\n            Smart.Render();\r\n            if (that.onCreate) {\r\n                that.onCreate();\r\n            }\r\n            that.nativeElement.whenRendered(() => {\r\n                if (that.onReady) {\r\n                    that.onReady();\r\n                }\r\n            });\r\n        }\r\n        // setup styles.\r\n        if (styles) {\r\n            for (let styleName in styles) {\r\n                that.nativeElement.style[styleName] = styles[styleName];\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.componentDidRender(true);\r\n    }\r\n    componentDidUpdate() {\r\n        this.componentDidRender(false);\r\n    }\r\n    componentWillUnmount() {\r\n        const that = this;\r\n        if (!that.nativeElement) {\r\n            return;\r\n        }\r\n        that.nativeElement.whenRenderedCallbacks = [];\r\n        for (let i = 0; i < that.eventListeners.length; i++) {\r\n            const eventName = that.eventListeners[i];\r\n            that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\r\n        }\r\n    }\r\n    render() {\r\n        return (React.createElement(\"smart-tank\", { ref: this.componentRef }, this.props.children));\r\n    }\r\n}\n\nexport default Tank;\nexport { Smart, Tank };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}